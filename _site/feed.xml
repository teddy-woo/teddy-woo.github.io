<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>도현&apos;s Blog | 도현&apos;s 데브옵스 도전기!</title>
    <description>도현&apos;s 데브옵스 도전기! is made by Teddy-woo.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 23 Apr 2023 05:04:04 +0900</pubDate>
    <lastBuildDate>Sun, 23 Apr 2023 05:04:04 +0900</lastBuildDate>
    <generator>Jekyll v3.9.3</generator>
    
      <item>
        <title>DevOps&amp;#91;Day34&amp;#93; / [지속적 통합]</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/dnehgus6975/post/7c11f49e-0750-404a-af4d-49d7b9d5e24b/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;로드 밸런서의 대상그룹을 생성해준다. 다음과 같이 설정해준다.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/dnehgus6975/post/3e1aeb05-1b34-4745-85f9-19c7f834f6d3/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/dnehgus6975/post/d883f193-2bbb-4daa-8654-62e7bc52cf0e/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;include as pending below를 하지않고 다음으로 넘어간다.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/dnehgus6975/post/c5a03834-d05a-4953-a4ae-753ff87c3e4a/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Application Load Balancer를 생성한다.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/dnehgus6975/post/642cfc46-5282-4b39-8b20-093b2bfd3243/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;로드밸런서 세팅은 다음과같이 한다. Listeners and routing에서 target group은 위에서 만든 target group을 선택한다. Listeners and routing 에서 HTTP 3333포트를 추가한다. 보안 그룹은 기본으로하면 모두 닫혀있기 때문에 다른 보안그룹을 선택해야한다.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/dnehgus6975/post/cc35ccee-8d19-4b91-ba7c-c51ecfb6ea68/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/dnehgus6975/post/2e29a095-e316-42f9-9f74-9a63d722ae89/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/dnehgus6975/post/0964d3df-ff7f-423e-9748-8d17275e60c2/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/dnehgus6975/post/9f988b52-4c0d-4d79-9831-8ce30472ac0c/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;ECS -&amp;gt; 작업정의 -&amp;gt; 새 작업 정의...</description>
        <pubDate>Fri, 21 Apr 2023 09:00:00 +0900</pubDate>
        <link>http://localhost:4000/day34/</link>
        <guid isPermaLink="true">http://localhost:4000/day34/</guid>
        
        <category>AWS</category>
        
        <category>아마존 웹 서비스</category>
        
        <category>자동화</category>
        
        <category>지속적 통합</category>
        
        <category>ECS</category>
        
        <category>DevOps BootCamp</category>
        
        <category>지속적 통합</category>
      </item>
    
      <item>
        <title>DevOps&amp;#91;Day33&amp;#93; / [지속적 통합]</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/dnehgus6975/post/cbf90eca-d4d5-4794-a242-893a3386a946/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;h2 id=&quot;github-action이란&quot;&gt;Github Action이란?&lt;/h2&gt; &lt;p&gt;Github Action은 github에서 공식적으로 제공하는 CI/CD 툴, 다시 말해 개발의 work flow를 자동화할 수 있게 도와주는 툴이다.&lt;/p&gt; &lt;h3 id=&quot;cicd란&quot;&gt;CI/CD란?&lt;/h3&gt; &lt;p&gt;CI는 Continuous Integration(지속적 통합), CD는 Continuous Delivery(지속적 전달)의 줄임말이다.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;CI : 테스트, 빌드, Dockerizing, 저장소에 전달하는 것까지 프로덕션 환경으로 서비스를 배포할 수 있도록 준비하는 프로세스 CD : 저장소로 전달된 프로덕션 서비스를 실제 사용자들에게 배포하는 프로세스 작업한 소스 코드를 빌드하고, 저장소에 전달 후 배포까지 하는 과정을 통상적으로 CI/CD라고 부른다.&lt;/p&gt; &lt;/blockquote&gt; &lt;h3 id=&quot;github-action의-코어-개념&quot;&gt;Github Action의 코어 개념&lt;/h3&gt; &lt;h4 id=&quot;--workflow&quot;&gt;- Workflow&lt;/h4&gt; &lt;p&gt;자동화된 전체 프로세스. 하나 이상의 Job으로 구성되고, Event에 의해 예약되거나 트리거될 수 있는 자동화된 절차를 말한다....</description>
        <pubDate>Thu, 20 Apr 2023 09:00:00 +0900</pubDate>
        <link>http://localhost:4000/day33/</link>
        <guid isPermaLink="true">http://localhost:4000/day33/</guid>
        
        <category>Github</category>
        
        <category>Github Action</category>
        
        <category>자동화</category>
        
        <category>지속적 통합</category>
        
        <category>DevOps BootCamp</category>
        
        <category>지속적 통합</category>
      </item>
    
      <item>
        <title>DevOps&amp;#91;Day32-2&amp;#93; / [Docker]</title>
        <description>&lt;h1 id=&quot;도커-컴포즈란&quot;&gt;도커 컴포즈란?&lt;/h1&gt; &lt;p&gt;도커 컴포즈는 단일 서버에서 여러개의 컨테이너를 하나의 서비스로 정의해 컨테이너의 묶음으로 관리할 수 있는 작업 환경을 제공하는 관리 도구입니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/dnehgus6975/post/6c4b965e-76a4-4237-b2a0-a11cffd33400/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;h3 id=&quot;도커-컴포즈를-사용하는-이유&quot;&gt;도커 컴포즈를 사용하는 이유&lt;/h3&gt; &lt;p&gt;여러 개의 컨테이너가 하나의 어플리케이션으로 동작할 때 도커 컴포즈를 사용하지 않는다면, 이를 테스트하려면 각 컨테이너를 하나씩 생성해야 합니다. 예를 들면, 웹 어플리케이션을 테스트하려면 웹 서버 컨테이너, 데이터베이스 컨테이너 두 개의 컨테이너를 각각 생성해야 합니다.&lt;/p&gt; &lt;p&gt;즉, 아래와 같이 두개의 run 명령어를 입력해야합니다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; wordpress_db &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; mysql:8 &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8080:80 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--link&lt;/span&gt; wordpress_db:mysql...</description>
        <pubDate>Wed, 19 Apr 2023 09:00:00 +0900</pubDate>
        <link>http://localhost:4000/day32-2/</link>
        <guid isPermaLink="true">http://localhost:4000/day32-2/</guid>
        
        <category>docker</category>
        
        <category>Dockerfile</category>
        
        <category>Compose</category>
        
        <category>DevOps BootCamp</category>
        
        <category>Docker</category>
      </item>
    
      <item>
        <title>DevOps&amp;#91;Day32-1&amp;#93; / [아마존 웹 서비스(AWS)]</title>
        <description>&lt;h1 id=&quot;iam-identity-and-access-management-란&quot;&gt;IAM (Identity and Access Management) 란?&lt;/h1&gt; &lt;p&gt;IAM은 사용자의 접근 권한을 관리 하는 서비스 이다.&lt;/p&gt; &lt;p&gt;IAM을 통해서 회사 내 AWS를 사용하는 사람들에게 부서 마달 사용자별로 AWS에서 제공하는 서비스들, 서비스에 생성된 자원 등에 대해 세분된 권한을 지정할 수 있다.&lt;/p&gt; &lt;p&gt;예를 들어 개발부서 그룹은 EC2와 S3 서비스에 대한 엑세스 권한을 주고, DB관리 부서 그룹은 RDS 엑세스 권한을 준다던지 세부 설정이 가능하다.&lt;/p&gt; &lt;p&gt;따라서 대부분의 사용자 권한 관리 서비스와 마찬가지로, 최고 관리자가 Root 계정을 관리하고 그밖의 사용자들은 각자 계정을 발급받아 제한된 권한을 갖고 AWS를 이용하게 된다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/dnehgus6975/post/3fa24ed6-cc3e-4b1d-86e5-6e9d890b9a84/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;p&gt;IAM은 AWS 서비스에 대한 엑세스 권한 설정 뿐만 아니라, 언제 어디서 누가 무엇을 어떻게...</description>
        <pubDate>Wed, 19 Apr 2023 09:00:00 +0900</pubDate>
        <link>http://localhost:4000/day32-1/</link>
        <guid isPermaLink="true">http://localhost:4000/day32-1/</guid>
        
        <category>아마존 웹 서비스</category>
        
        <category>AWS</category>
        
        <category>AIM</category>
        
        <category>Identity and Access Management</category>
        
        <category>접근 권한 관리 서비스</category>
        
        <category>Root 계정</category>
        
        <category>최고 관리자</category>
        
        <category>엑세스 권한</category>
        
        <category>자격증명</category>
        
        <category>역할</category>
        
        <category>검증</category>
        
        <category>DevOps BootCamp</category>
        
        <category>아마존 웹 서비스(AWS)</category>
      </item>
    
      <item>
        <title>DevOps&amp;#91;Day33-1&amp;#93; / [아마존 웹 서비스(AWS)]</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/dnehgus6975/post/bcc4d455-3078-4612-aa60-595649bf40f2/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;p&gt;S3 를 통해 Front-end 사이트를 얻어오고, EC2 와 RDS를 통해 백엔드, DB 서버를 만들어 보았다.&lt;/p&gt; &lt;h3 id=&quot;만든-순서는-크게-다음과-같다&quot;&gt;만든 순서는 크게 다음과 같다.&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;프론트 초기 세팅 &lt;ul&gt; &lt;li&gt;리액트를 빌드한다.&lt;/li&gt; &lt;li&gt;S3 에 버킷을 생성&lt;/li&gt; &lt;li&gt;빌드 결과물을 버킷에 넣는다.&lt;/li&gt; &lt;li&gt;액세스 전부 허용, 정적 호스팅을 허용&lt;/li&gt; &lt;li&gt;정책을 설정하여 객체에 GET 이 가능하도록 한다.&lt;/li&gt; &lt;li&gt;프론트 사이트가 보여지는 지 확인한다.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;백엔드 초기 세팅 &lt;ul&gt; &lt;li&gt;보안 그룹을 생성한다.&lt;/li&gt; &lt;li&gt;EC2를 생성한다.&lt;/li&gt; &lt;li&gt;EC2에 노드 서버를 넣고 실행한다.&lt;/li&gt; &lt;li&gt;백엔드 서버에 접속이 되는 지 확인한다.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;프론트엔드를 백엔드 서버와 연결한다. &lt;ul&gt; &lt;li&gt;RDS 와 백엔드를 연동한다.&lt;/li&gt; &lt;li&gt;RDS 생성&lt;/li&gt; &lt;li&gt;RDS에 대해 보안그룹의 인바운드를 설정한다. 백엔드 서버(EC2)는...</description>
        <pubDate>Tue, 18 Apr 2023 09:00:00 +0900</pubDate>
        <link>http://localhost:4000/day31-3/</link>
        <guid isPermaLink="true">http://localhost:4000/day31-3/</guid>
        
        <category>아마존 웹 서비스</category>
        
        <category>AWS</category>
        
        <category>S3</category>
        
        <category>Front-end</category>
        
        <category>EC2</category>
        
        <category>RDS</category>
        
        <category>DB</category>
        
        <category>Back-end</category>
        
        <category>Node</category>
        
        <category>보안그룹</category>
        
        <category>DevOps BootCamp</category>
        
        <category>아마존 웹 서비스(AWS)</category>
      </item>
    
      <item>
        <title>DevOps&amp;#91;Day31-2&amp;#93; / [아마존 웹 서비스(AWS)]</title>
        <description>&lt;h2 id=&quot;도메인-연결과-cdn-및-https-적용&quot;&gt;도메인 연결과 CDN 및 HTTPS 적용&lt;/h2&gt; &lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/dnehgus6975/post/699c9738-63bb-4ee1-bc8f-b89644819076/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;h3 id=&quot;1-certificate-manager를-통한-도메인-인증서-발급&quot;&gt;1. Certificate Manager를 통한 도메인 인증서 발급&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;구매한 도메인을 기준으로 인증서를 발급 받습니다. &lt;ul&gt; &lt;li&gt;인증서는 프론트엔드 Cloudfront 사용 리전인 us-east-1과 백엔드 Load Balancer 사용리전인 ap-northeast-2에서 발급 받아야 합니다.&lt;/li&gt; &lt;li&gt;발급 시, DNS 검증 가이드로 레퍼런스를 참고하세요.&lt;/li&gt; &lt;li&gt;이후에 DNS 공급자로 Route53을 이용합니다. Route53에 레코드 생성과정을 반드시 거쳐야합니다.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;인증까지 최소 30분의 시간이 소요될 수 있습니다.&lt;/li&gt; &lt;/ul&gt; &lt;h4 id=&quot;도메인-구매&quot;&gt;도메인 구매&lt;/h4&gt; &lt;blockquote&gt; &lt;p&gt;Route53의 도메인 -&amp;gt; 등록된 도메인 -&amp;gt; 도메인 등록 으로 들어가서 도메인을 구매한다. &lt;strong&gt;도메인 이름과 S3버킷의 이름을 맞춰줘야함으로 S3버킷도 도메인이름으로 생성해줘야한다!!&lt;/strong&gt; 맞추지 않았을 때 에러가 발생한다&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/dnehgus6975/post/5c051722-7346-4d53-a9dd-7a66abc82b62/image.png&quot;...</description>
        <pubDate>Tue, 18 Apr 2023 09:00:00 +0900</pubDate>
        <link>http://localhost:4000/day31-2/</link>
        <guid isPermaLink="true">http://localhost:4000/day31-2/</guid>
        
        <category>아마존 웹 서비스</category>
        
        <category>AWS</category>
        
        <category>CDN</category>
        
        <category>HTTPS</category>
        
        <category>Certificate Manager</category>
        
        <category>Cloudfront</category>
        
        <category>Load Balancer</category>
        
        <category>Route53</category>
        
        <category>DNS</category>
        
        <category>DevOps BootCamp</category>
        
        <category>아마존 웹 서비스(AWS)</category>
      </item>
    
      <item>
        <title>DevOps&amp;#91;Day31-1&amp;#93; / [아마존 웹 서비스(AWS)]</title>
        <description>&lt;h1 id=&quot;오토-스케일링-auto-scaling&quot;&gt;오토 스케일링 (Auto Scaling)&lt;/h1&gt; &lt;p&gt;클라우드 컴퓨팅의 대표적인 장점으로는 &lt;strong&gt;필요에 따라 서비스를 빠르게 확장하거나 축소&lt;/strong&gt;할 수 있는 유연성을 들 수 있다.&lt;/p&gt; &lt;p&gt;그중, 오토스케일링(Auto Scaling)은 클라우드의 유연성을 돋보이게 하는 핵심기술로 CPU, 메모리, 디스크, 네트워크 트래픽과 같은 시스템 자원들의 메트릭(Metric) 값을 모니터링하여 &lt;strong&gt;서버 사이즈를 자동으로 조절&lt;/strong&gt; 하는 서비스를 말한다.&lt;/p&gt; &lt;p&gt;이를 통해 사용자는 예상치 못한 서비스 부하에 효과적으로 대응하고, 최대한 저렴한 비용으로 안정적이고 예측 가능한 성능을 유지 할수 있다.&lt;/p&gt; &lt;h2 id=&quot;스케일링-이란&quot;&gt;스케일링 이란?&lt;/h2&gt; &lt;p&gt;오토스케일링(Auto Scaling)에 대해 배우기 앞서 스케일링(Scaling)이 정확히 무엇을 의미하는지 간단하게 짚고 넘어가도록 하자.&lt;/p&gt; &lt;p&gt;스케일링 이란 &lt;strong&gt;인스턴스 혹은 컴퓨팅 파워를 늘리는 것&lt;/strong&gt;을 말한다.&lt;/p&gt; &lt;p&gt;스케일링의 방법에는 대표적으로 2가지가 있다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/dnehgus6975/post/59953ad6-8ce3-4bf0-815b-6e0bc9d30bbb/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;...</description>
        <pubDate>Tue, 18 Apr 2023 09:00:00 +0900</pubDate>
        <link>http://localhost:4000/day31-1/</link>
        <guid isPermaLink="true">http://localhost:4000/day31-1/</guid>
        
        <category>아마존 웹 서비스</category>
        
        <category>AWS</category>
        
        <category>오토 스케일링 (Auto Scaling)</category>
        
        <category>스케일 업(Scale Up)</category>
        
        <category>스케일 아웃(Scale Out)</category>
        
        <category>스케일 인(Scale In)</category>
        
        <category>오토 스케일링 그룹(Groups)</category>
        
        <category>DevOps BootCamp</category>
        
        <category>아마존 웹 서비스(AWS)</category>
      </item>
    
      <item>
        <title>DevOps&amp;#91;Day30-에러 해결 (2)&amp;#93; / [아마존 웹 서비스(AWS)]</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/dnehgus6975/post/f5639010-9cd0-4b52-967b-d050a301bacc/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;aws EC2로 인스턴스를 열고 해당 인스턴스에서 npm start를 하였으나 해당 오류가 발생하였다.&lt;/p&gt; &lt;/blockquote&gt; &lt;h2 id=&quot;에러-원인&quot;&gt;에러 원인&lt;/h2&gt; &lt;p&gt;해석해보면 80번 포트에 대한 접근권한이 없다는 의미이다. 검색을 통해 알아본 에러의 원인은 리눅스에서 별도로 1024 이상의 포트를 쓸경우에는 root권한이 필요하지 않으나, 1024이하의 well known port를 사용하려면 root 권한이 필요했다. 내가 생성한 인스턴스의 OS는 Ubuntu였기 때문에 root권한을 주거나 다른 포트로 변경 해줘야했다.&lt;/p&gt; &lt;h2 id=&quot;에러-해결&quot;&gt;에러 해결&lt;/h2&gt; &lt;h3 id=&quot;방법1&quot;&gt;방법1&lt;/h3&gt; &lt;p&gt;해당 폴더와 해당 폴더에 있는 모든 파일의 소유를 root 계정으로 바꿔주고 루트로 접속해서 실행하면된다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// ex&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo chown&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; root:root nestSetting/ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span...</description>
        <pubDate>Mon, 17 Apr 2023 09:00:00 +0900</pubDate>
        <link>http://localhost:4000/day30-4/</link>
        <guid isPermaLink="true">http://localhost:4000/day30-4/</guid>
        
        <category>아마존 웹 서비스</category>
        
        <category>AWS</category>
        
        <category>ec2</category>
        
        <category>npm</category>
        
        <category>DevOps BootCamp</category>
        
        <category>트러블 슈팅</category>
      </item>
    
      <item>
        <title>DevOps&amp;#91;Day30-에러 해결 (1)&amp;#93; / [아마존 웹 서비스(AWS)]</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/dnehgus6975/post/0760354e-aeae-463d-a7b0-fe8b524acbe4/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;aws 배포를 공부해보기 위해 파일을 받아서 npm start나 npm build를 해봤으나 해당 오류가 발생 하였다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;해결 방법 찾아보았을 때 node버전이 높아서 나는 문제라 16버전으로 내리면 된다라는 사실을 알았다.&lt;/li&gt; &lt;/ul&gt; &lt;/blockquote&gt; &lt;h2 id=&quot;해결&quot;&gt;해결&lt;/h2&gt; &lt;p&gt;node 버전을 낮추려다가 캐시삭제와 n플러그인 설치 등이 대부분 리눅스 환경에서 알려주고 있어서 window로 실습을 하던 나에게 번거롭게 느껴져 다른 방법을 찾던중에 package.json의 script를 수정하여 간단하게 해결할 수 있는 방법을 찾았다.&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;scripts&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;start&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;react-scripts&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;start&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;build&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;react-scripts&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;build&quot;&lt;/span&gt;&lt;span...</description>
        <pubDate>Mon, 17 Apr 2023 09:00:00 +0900</pubDate>
        <link>http://localhost:4000/day30-3/</link>
        <guid isPermaLink="true">http://localhost:4000/day30-3/</guid>
        
        <category>아마존 웹 서비스</category>
        
        <category>AWS</category>
        
        <category>node</category>
        
        <category>npm</category>
        
        <category>DevOps BootCamp</category>
        
        <category>트러블 슈팅</category>
      </item>
    
      <item>
        <title>DevOps&amp;#91;Day30-2&amp;#93; / [아마존 웹 서비스(AWS)]</title>
        <description>&lt;h2 id=&quot;네트워크-acl-nacl-network-access-control-list&quot;&gt;네트워크 ACL, NACL (Network Access Control List)&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;네트워크 ACL(액세스 제어 목록)은 1개 이상의 서브넷 내부와 외부의 트래픽을 제어하기 위한 방확벽 역할을 하는 VPC를 위한 선택적 보안 계층입니다&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;nacl-특징&quot;&gt;NACL 특징&lt;/h3&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;보안 그룹처럼 방화벽 역할을 담당&lt;/p&gt; &lt;/li&gt; &lt;li&gt;서브넷 단위 &lt;ul&gt; &lt;li&gt;인스턴스 단위로 제어 불가능&lt;/li&gt; &lt;li&gt;다양한 서브넷에 연동 가능 (1:N)&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;포트 및 아이피를 직접 Deny 가능 &lt;ul&gt; &lt;li&gt;외부 공격을 받는 상황 등 특정 아이피를 블록하고 싶을 때 사용&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Stateless&lt;/li&gt; &lt;li&gt;들어오는 트래픽과 나가는 트래픽을 구분하지 않음 &lt;ul&gt; &lt;li&gt;즉 일반적으로 Outbound에 Ephemeral Port(임시 포트) 범위를 열어 주어야 정상적으로 통신 가능 &lt;h3 id=&quot;nacl-규칙&quot;&gt;NACL 규칙&lt;/h3&gt; &lt;/li&gt; &lt;/ul&gt;...</description>
        <pubDate>Mon, 17 Apr 2023 09:00:00 +0900</pubDate>
        <link>http://localhost:4000/day30-2/</link>
        <guid isPermaLink="true">http://localhost:4000/day30-2/</guid>
        
        <category>아마존 웹 서비스</category>
        
        <category>AWS</category>
        
        <category>NACL</category>
        
        <category>Network Access Control List</category>
        
        <category>네트워크 ACL</category>
        
        <category>방화벽</category>
        
        <category>Security Group</category>
        
        <category>보안그룹</category>
        
        <category>DevOps BootCamp</category>
        
        <category>아마존 웹 서비스(AWS)</category>
      </item>
    
      <item>
        <title>DevOps&amp;#91;Day30-1&amp;#93; / [아마존 웹 서비스(AWS)]</title>
        <description>&lt;h2 id=&quot;vpn&quot;&gt;VPN&lt;/h2&gt; &lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/arnold_99/post/e04f57dc-05ec-46f1-85df-862734006236/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;p&gt;VPN은 한국어로 “가상사설망”이라합니다. 앞에 “가상”이라는 단어에서 알 수 있듯 실제 사설망이 아닌 가상의 사설망입니다. 만약 위 그림과같이 회사의 네트워크가 구성되어있고 보안상의 이유로 직원간 네트워크를 분리하고싶다면 기존 인터넷선 선공사도 다시해야하고 건물의 내부선을 다 뜯어고쳐야하며 다시 전용선을 깔아주어야합니다. &lt;strong&gt;이를위해 가상의 망 VPN을 사용하게됩니다.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/arnold_99/post/4e0c17b2-2ab7-4ac3-b5a1-129e67beac64/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;p&gt;VPN은 네트워크A와 네트워크B가 실제로 같은 네트워크상에 있지만 논리적으로 다른네트워크인것처럼 동작합니다. 이를 우리는 ‘가상사설망’이라고합니다.&lt;/p&gt; &lt;h2 id=&quot;vpcvirtual-private-cloud&quot;&gt;VPC(Virtual Private Cloud)&lt;/h2&gt; &lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/arnold_99/post/af87f573-d5dc-4386-ad3b-f0af1ee57410/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;p&gt;VPC가 없다면 EC2 인스턴스들이 서로 거미줄처럼 연결되고 인터넷과 연결됩니다. 이런 구조는 시스템의 복잡도를 엄청나게 끌어올릴뿐만 아니라 하나의 인스턴스만 추가되도 모든 인스턴스를 수정해야하는 불편함이 생깁니다. 마치 인터넷 전용선을 다시까는것과...</description>
        <pubDate>Mon, 17 Apr 2023 09:00:00 +0900</pubDate>
        <link>http://localhost:4000/day30-1/</link>
        <guid isPermaLink="true">http://localhost:4000/day30-1/</guid>
        
        <category>아마존 웹 서비스</category>
        
        <category>AWS</category>
        
        <category>VPN</category>
        
        <category>VPC</category>
        
        <category>Virtual Private Cloud</category>
        
        <category>가상상설망</category>
        
        <category>네트워크</category>
        
        <category>DevOps BootCamp</category>
        
        <category>아마존 웹 서비스(AWS)</category>
      </item>
    
      <item>
        <title>DevOps&amp;#91;Day29-4&amp;#93; / [아마존 웹 서비스(AWS)]</title>
        <description>&lt;h2 id=&quot;rds-architecture&quot;&gt;RDS Architecture&lt;/h2&gt; &lt;h3 id=&quot;관계형-데이터베이스의-개요&quot;&gt;관계형 데이터베이스의 개요&lt;/h3&gt; &lt;p&gt;데이터베이스 관리 시스템, 즉 DBMS는 데이터 저장, 조직화, 인출과 관련된 제반 업무를 관장하는 소프트웨어입니다. 그 중 관계형 데이터베이스에서 정보는 열과 행으로 이뤄진 테이블에 저장되고, 테이블에 저장된 데이터는 공통 키 또는 공통 컨셉에 따라 서로 관계를 유지하며, 테이블에서 데이터를 인출할 때 이와 같은 관계성을 이용한다는 측면에서 관계형 데이터베이스라는 이름이 붙었습니다.&lt;/p&gt; &lt;h3 id=&quot;amazon-rds의-개요&quot;&gt;Amazon RDS의 개요&lt;/h3&gt; &lt;p&gt;AWS는 관계형 데이터베이스 호스팅 및 관리 서비스인 Amazon Relational Database Service(RDS)를 제공하며, 다음과 같은 RDBMS 엔진을 사용할 수 있습니다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Aurora MySQL&lt;/li&gt; &lt;li&gt;Aurora PostgreSQL&lt;/li&gt; &lt;li&gt;Oracle -SQL Server&lt;/li&gt; &lt;li&gt;MySQL&lt;/li&gt; &lt;li&gt;PostgreSQL&lt;/li&gt; &lt;li&gt;MariaDB&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Amazon RDS를 본격적으로 소개하기 전 데이터베이스 호스팅 방식을 알아보겠습니다....</description>
        <pubDate>Fri, 14 Apr 2023 09:00:00 +0900</pubDate>
        <link>http://localhost:4000/day29-4/</link>
        <guid isPermaLink="true">http://localhost:4000/day29-4/</guid>
        
        <category>아마존 웹 서비스</category>
        
        <category>AWS</category>
        
        <category>RDS</category>
        
        <category>database</category>
        
        <category>데이터베이스</category>
        
        <category>RDBMS</category>
        
        <category>mysql</category>
        
        <category>DevOps BootCamp</category>
        
        <category>아마존 웹 서비스(AWS)</category>
      </item>
    
      <item>
        <title>DevOps&amp;#91;Day29-3&amp;#93; / [아마존 웹 서비스(AWS)]</title>
        <description>&lt;h2 id=&quot;1-블록-스토리지&quot;&gt;1. 블록 스토리지&lt;/h2&gt; &lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/arnold_99/post/f033dc6f-cd53-4550-973d-94235084954e/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;p&gt;블록 스토리지는 데이터를 일정한 크기의 블록으로 저장하는 방식입니다. 블록은 파일 보다는 작은 단위로서 조각으로 나누어 저장&lt;/p&gt; &lt;p&gt;나누어진 각각의 블록은 고유한 주소를 가지고 있습니다. 이 주소를 통하여 재구성하여 데이터를 불러올 수 있습니다.&lt;/p&gt; &lt;p&gt;SAN(Storage Area Network) 또는 가상머신의 디스크로 사용하며, 정형화된 데이터를 빠르게 처리하는 용도로 많이 사용됩니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/arnold_99/post/66d4b9b3-5369-4163-94f0-5b6da2055fc3/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;블록 스토리지는 주차장에 비유됩니다. 주차장의 한 구획이 블록으로 비유되어 특정 공간에 차를 주차하듯이 정해진 블록에 데이터를 저장합니다.&lt;/p&gt; &lt;/blockquote&gt; &lt;h3 id=&quot;장점&quot;&gt;장점&lt;/h3&gt; &lt;p&gt;블록 스토리지에서는 고유 주소가 있어 파일 스토리지와 달리 계층 구조도 필요없고, 경로도 하나만 있는 것이 아니라 다양하게 가지고 있습니다. 그만큼 데이터를 신속하게...</description>
        <pubDate>Fri, 14 Apr 2023 09:00:00 +0900</pubDate>
        <link>http://localhost:4000/day29-3/</link>
        <guid isPermaLink="true">http://localhost:4000/day29-3/</guid>
        
        <category>아마존 웹 서비스</category>
        
        <category>AWS</category>
        
        <category>EC2</category>
        
        <category>스토리지</category>
        
        <category>S3</category>
        
        <category>버킷</category>
        
        <category>bucket</category>
        
        <category>EBS</category>
        
        <category>EFS</category>
        
        <category>객체 스토리지</category>
        
        <category>블록 스토리지</category>
        
        <category>파일 스토리지</category>
        
        <category>DevOps BootCamp</category>
        
        <category>아마존 웹 서비스(AWS)</category>
      </item>
    
      <item>
        <title>DevOps&amp;#91;Day29-2&amp;#93; / [아마존 웹 서비스(AWS)]</title>
        <description>&lt;h2 id=&quot;인스턴스instances&quot;&gt;인스턴스(Instances)&lt;/h2&gt; &lt;p&gt;가상 컴퓨팅 환경으로, 하나의 가상 컴퓨터(서버)라고 생각하면 됩니다. 인스턴스에서 실행하려는 애플리케이션 또는 소프트웨어에 필요한 메모리 양과 컴퓨팅 파워를 기준으로 인스턴스 유형을 선택합니다.&lt;/p&gt; &lt;h3 id=&quot;amazon-machine-imageami&quot;&gt;Amazon Machine Image(AMI)&lt;/h3&gt; &lt;p&gt;클라우드에서 실행되는 서버에 대한 모든 소프트웨어 환경 설정 정보를 포함한 기본 설계도 또는 청사진과 같습니다. AMI에는 운영체제, 애플리케이션 서버 그리고 그 위에서 실행되는 애플리케이션 등에 대한 세부 내용을 모두 담고 있습니다. AMI로 서버 또는 인스턴스를 론칭하면 모든 요소가 상속되어 만들어 집니다. 사용자는 AMI를 통해 자신이 원하는 수만큼 인스턴스를 생성할 수 있습니다.&lt;/p&gt; &lt;h3 id=&quot;인스턴스-유형&quot;&gt;인스턴스 유형&lt;/h3&gt; &lt;p&gt;인스턴스를 시작할 때 지정하는 인스턴스 유형에 따라 인스턴스에 사용되는 호스트 컴퓨터의 하드웨어가 결정됩니다. 각 인스턴스 유형은 서로 다른...</description>
        <pubDate>Fri, 14 Apr 2023 09:00:00 +0900</pubDate>
        <link>http://localhost:4000/day29-2/</link>
        <guid isPermaLink="true">http://localhost:4000/day29-2/</guid>
        
        <category>아마존 웹 서비스</category>
        
        <category>AWS</category>
        
        <category>EC2</category>
        
        <category>Instances</category>
        
        <category>인스턴스</category>
        
        <category>DevOps BootCamp</category>
        
        <category>아마존 웹 서비스(AWS)</category>
      </item>
    
      <item>
        <title>DevOps&amp;#91;Day29-1&amp;#93; / [아마존 웹 서비스(AWS)]</title>
        <description>&lt;h2 id=&quot;ec2&quot;&gt;EC2&lt;/h2&gt; &lt;p&gt;EC2란 아마존 웹 서비스에서 제공하는 클라우드 컴퓨팅 서비스입니다. 클라우드 컴퓨팅은 인터넷(클라우드)을 통해 서버, 스토리지, 데이터베이스 등의 컴퓨팅 서비스를 제공하는 서비스입니다. 정리하면 아마존에서 가상의 컴퓨터를 한 대 빌리는 것과 같습니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/arnold_99/post/ea2039cd-b3bf-414f-a42e-6e1ab5e7a47d/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;AWS에서 제공하는 Elastic Compute Cloud 서비스 앞에 붙은 Elastic이라는 단어는 어떤 의미일까요?&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;해당 단어는 고사양 게임을 플레이하는 것에 비유하여 설명하면 이해하기 편합니다.&lt;/p&gt; &lt;p&gt;집에서 고사양 게임을 하기 위해서는 게임을 1시간을 하든지 10시간을 하든지 간에 기본적으로 지출해야 하는 돈이 있습니다.&lt;/p&gt; &lt;p&gt;그런데 후불제 PC방에 간다면 집에서 게임을 하기 위해서 기본적으로 지출해야 하는 비용 대신, PC방을 사용한 시간에 대해서만 비용을 지불하면 됩니다.&lt;/p&gt; &lt;p&gt;EC2 서비스도 이런 후불제 PC방과...</description>
        <pubDate>Fri, 14 Apr 2023 09:00:00 +0900</pubDate>
        <link>http://localhost:4000/day29-1/</link>
        <guid isPermaLink="true">http://localhost:4000/day29-1/</guid>
        
        <category>아마존 웹 서비스</category>
        
        <category>AWS</category>
        
        <category>EC2</category>
        
        <category>DevOps BootCamp</category>
        
        <category>아마존 웹 서비스(AWS)</category>
      </item>
    
      <item>
        <title>DevOps&amp;#91;Day28-7&amp;#93; / [Docker]</title>
        <description>&lt;h2 id=&quot;env&quot;&gt;ENV&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;환경변수 지정&lt;/li&gt; &lt;li&gt;$변수 혹은 ${변수} 형태로 표현 가능&lt;/li&gt; &lt;li&gt;또한, ${변수:-값}으로 값을 기본값으로 표현 가능&lt;/li&gt; &lt;li&gt;${변수:+값}의 경우는 반대에 경우인데 사용할 일이 있을까 싶다.&lt;/li&gt; &lt;li&gt;docker run 시에 –e 옵션을 활용하여 오버라이딩 할 수 있다. &lt;h2 id=&quot;arg&quot;&gt;ARG&lt;/h2&gt; &lt;/li&gt; &lt;li&gt;build 시점에만 사용되는 변수&lt;/li&gt; &lt;li&gt;ARG 변수 혹은 ARG 변수=값 형태로 표현 가능&lt;/li&gt; &lt;li&gt;ENV처럼 ${변수:+값}, ${변수:-값}으로도 표현 가능&lt;/li&gt; &lt;li&gt;docker build 시에 –build-arg 옵션을 활용하여 오버라이딩 할 수 있다. ``` #example &lt;h1 id=&quot;expect-a-build-time-variable이미지-빌드-시-build-arg-파라미터로-변수-값-전달하기&quot;&gt;expect a build-time variable(이미지 빌드 시 –build-arg 파라미터로 변수 값 전달하기)&lt;/h1&gt; &lt;p&gt;ARG SOME_VALUE&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h1 id=&quot;set-default-env-value-from-arg&quot;&gt;set default ENV value from ARG&lt;/h1&gt; &lt;p&gt;ENV env_var=$SOME_VALUE&lt;/p&gt; &lt;h1 id=&quot;if-not-overridden-that-value-of-env_var-will-be-available-to-your-containers&quot;&gt;if not overridden, that value of env_var...</description>
        <pubDate>Thu, 13 Apr 2023 09:00:00 +0900</pubDate>
        <link>http://localhost:4000/day28-7/</link>
        <guid isPermaLink="true">http://localhost:4000/day28-7/</guid>
        
        <category>docker</category>
        
        <category>env</category>
        
        <category>arg</category>
        
        <category>DevOps BootCamp</category>
        
        <category>Docker</category>
      </item>
    
      <item>
        <title>DevOps&amp;#91;Day28-6&amp;#93; / [Docker]</title>
        <description>&lt;h2 id=&quot;도커-네트워크-구조&quot;&gt;도커 네트워크 구조&lt;/h2&gt; &lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/arnold_99/post/8f034405-c3e5-45e4-a004-99672daac3ed/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;p&gt;기본적으로 도커를 호스트 운영체제에 설치하면 여러가지 네트워크 드라이버들이 설치되며 IP 주소를 순차적으로 할당하고 도커 컨테이너를 실행할 때 사용하고 싶은 네트워크 드라이버를 선택할 수 있습니다.&lt;/p&gt; &lt;p&gt;기본적으로 도커는 컨테이너에 172.17.0.x의 IP를 순차적으로 할당합니다. 확인해보기 위해 아래의 명령어로 컨테이너를 생성해줍니다.&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -it ubuntu:focal &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;그리고 컨테이너 내부에서 ifconfig 명령어로 컨테이너의 네트워크 인터페이스를 확인합니다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/arnold_99/post/aa7b8596-92a5-40f3-9d9e-f39ceba376df/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;p&gt;위 스크린샷을 보면 lo 네트워크 인터페이스와 eth0 네트워크 인터페이스가 각각 172.17.0.1과 172.17.0.2가 할당된 것을 확인할 수 있습니다. 이 IP들은 내부 IP로 아무런 설정을 하지 않았다면 이 컨테이너는 외부에서 접근할 수 없으며 &lt;strong&gt;도커가 설치된...</description>
        <pubDate>Thu, 13 Apr 2023 09:00:00 +0900</pubDate>
        <link>http://localhost:4000/day28-6/</link>
        <guid isPermaLink="true">http://localhost:4000/day28-6/</guid>
        
        <category>docker</category>
        
        <category>network</category>
        
        <category>docker netork</category>
        
        <category>DevOps BootCamp</category>
        
        <category>Docker</category>
      </item>
    
      <item>
        <title>DevOps&amp;#91;Day28-5&amp;#93; / [Docker]</title>
        <description>&lt;h1 id=&quot;docker-compose실습&quot;&gt;Docker compose실습&lt;/h1&gt; &lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/arnold_99/post/6fb1b1ec-48bf-4b00-b665-9cbb98b84e36/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;h3 id=&quot;frontend-directory에-있는-files이-image로-build되어야함&quot;&gt;frontend directory에 있는 files이 image로 build되어야함&lt;/h3&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Apache HTTP Server (httpd:2.4)를 base image로 함&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;컨테이너 내 80으로 접속하면 index.html이 표시 됨&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;backend-directory에-있는-files이-image로-build되어야함&quot;&gt;backend directory에 있는 files이 image로 build되어야함&lt;/h3&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Node.js image (node:16-alpine)를 base image로 함&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;컨테이너 내 80으로 접속하면 hello from server가 응답으로 표시 됨&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;두-images가-동시에-실행-되어야함-docker-composeyml-사용&quot;&gt;두 images가 동시에 실행 되어야함 (docker-compose.yml 사용)&lt;/h3&gt; &lt;h2 id=&quot;1-image를-생성-하기위한-dockerfile을-각-frontend와-backend에-생성&quot;&gt;1. image를 생성 하기위한 dockerfile을 각 /frontend와 /backend에 생성&lt;/h2&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[frontend dockerfile] FROM httpd:2.4 //httpd:2.4이미지를 기반으로 하는 Apache 웹 서버 성 WORKDIR /usr/local/apache2/htdocs/ // 작업...</description>
        <pubDate>Thu, 13 Apr 2023 09:00:00 +0900</pubDate>
        <link>http://localhost:4000/day28-5/</link>
        <guid isPermaLink="true">http://localhost:4000/day28-5/</guid>
        
        <category>docker</category>
        
        <category>compose</category>
        
        <category>실습</category>
        
        <category>DevOps BootCamp</category>
        
        <category>Docker</category>
      </item>
    
      <item>
        <title>DevOps&amp;#91;Day28-4&amp;#93; / [Docker]</title>
        <description>&lt;h1 id=&quot;docker---volume-mount&quot;&gt;Docker - volume, mount&lt;/h1&gt; &lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/arnold_99/post/bc8551a2-1b4e-4768-bd20-1433c988bbbe/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;도커 컨테이너는 컨테이너마다 기본적으로 독립적인 저장소를 가지고 있다. 하나의 이미지로 여러 컨테이너를 만든다면 해당 컨테이너마다 독립적인 볼륨(하나의 파일 시스템을 갖춘 접근 가능한 저장 공간)이 할당되고, 컨테이너가 삭제되면 해당 볼륨 또한 삭제된다. 문제는 컨테이너 내부에 저장된 데이터는 컨테이너가 삭제되었을 경우 같이 삭제된다.&lt;/p&gt; &lt;/blockquote&gt; &lt;blockquote&gt; &lt;p&gt;그래서 도커에서는 데이터의 영속성을 보장하기 위하여 볼륨과 바인드 마운트를 이용한다. 볼륨과 바인드 마운트는 영속성을 보장하며 파일 시스템과 컨테이너를 분리하여 관리한다. 즉 컨테이너를 지웠다가 다시 실행해도 도커 볼륨과 연결한다면 데이터는 그대로 유지된다.&lt;/p&gt; &lt;/blockquote&gt; &lt;h2 id=&quot;마운트mount&quot;&gt;마운트(Mount)&lt;/h2&gt; &lt;p&gt;물리적인 장치를 특정한 디렉토리 위치에 연결시켜 주는 과정&lt;/p&gt; &lt;p&gt;리눅스에서는 하드디스크의 파티션, CD/DVD, USB메모리...</description>
        <pubDate>Thu, 13 Apr 2023 09:00:00 +0900</pubDate>
        <link>http://localhost:4000/day28-4/</link>
        <guid isPermaLink="true">http://localhost:4000/day28-4/</guid>
        
        <category>docker</category>
        
        <category>volume</category>
        
        <category>mount</category>
        
        <category>DevOps BootCamp</category>
        
        <category>Docker</category>
      </item>
    
      <item>
        <title>DevOps&amp;#91;Day28-3&amp;#93; / [Docker]</title>
        <description>&lt;h1 id=&quot;docker---docker-hub&quot;&gt;Docker - Docker Hub&lt;/h1&gt; &lt;h2 id=&quot;docker-hub란&quot;&gt;Docker Hub란?&lt;/h2&gt; &lt;p&gt;Docker Hub는 사용자가 Docker 컨테이너 이미지를 저장, 공유 및 관리할 수 있는 클라우드 기반 레지스트리 서비스입니다. 개발자와 IT 전문가가 미리 빌드된 Docker 이미지에 액세스하고 협업할 수 있는 중앙 리포지토리 역할을 하므로 Docker 환경에서 애플리케이션을 더 쉽게 빌드, 배포 및 실행할 수 있습니다.&lt;/p&gt; &lt;p&gt;Docker Hub를 통해 사용자는 다른 개발자가 만든 이미지를 검색하고 다운로드할 수 있을 뿐만 아니라 자신의 이미지를 저장하고 관리할 수 있습니다. 또한 사용자는 자동 빌드를 생성하여 소스 코드가 변경될 때마다 이미지를 자동으로 빌드하고 테스트할 수 있습니다.&lt;/p&gt; &lt;p&gt;Docker Hub는 공용 및 개인 리포지토리를 모두 제공하여 사용자가 이미지를 커뮤니티와 공유하거나 내부용으로 비공개로 유지할...</description>
        <pubDate>Thu, 13 Apr 2023 09:00:00 +0900</pubDate>
        <link>http://localhost:4000/day28-3/</link>
        <guid isPermaLink="true">http://localhost:4000/day28-3/</guid>
        
        <category>docker</category>
        
        <category>Docker Hub</category>
        
        <category>DevOps BootCamp</category>
        
        <category>Docker</category>
      </item>
    
      <item>
        <title>DevOps&amp;#91;Day28-2&amp;#93; / [Docker]</title>
        <description>&lt;h1 id=&quot;docker---컨테이너와-이미지-관리&quot;&gt;Docker - 컨테이너와 이미지 관리&lt;/h1&gt; &lt;h2 id=&quot;이미지와-컨테이너-삭제하기&quot;&gt;이미지와 컨테이너 삭제하기&lt;/h2&gt; &lt;h3 id=&quot;도커-컨테이너를-삭제한다&quot;&gt;도커 컨테이너를 삭제한다.&lt;/h3&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker rm &amp;lt;컨테이너&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h3 id=&quot;중지된-모든-컨테이너를-삭제한다&quot;&gt;중지된 모든 컨테이너를 삭제한다.&lt;/h3&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker container prune &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h3 id=&quot;도커-이미지를-삭제한다&quot;&gt;도커 이미지를 삭제한다.&lt;/h3&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker rmi &amp;lt;이미지&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h3 id=&quot;사용중이-아니고-태그가-존재하지-않는-모든-이미지를-삭제한다-태그가-존재하는-이미지도-삭제하려면-뒤에--a-옵션을-붙여준다&quot;&gt;사용중이 아니고 태그가 존재하지 않는 모든 이미지를 삭제한다. 태그가 존재하는 이미지도 삭제하려면 뒤에 -a 옵션을 붙여준다.&lt;/h3&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker image prune &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;이미지를 삭제 할 때, 해당 이미지를 포함하고 있는 컨테이너가 존재한다면 컨테이너의 실행 유무와 상관없이 삭제가 불가능하다.&lt;/p&gt; &lt;h3 id=&quot;컨테이너가-멈추면-자동으로-삭제하기&quot;&gt;컨테이너가 멈추면 자동으로 삭제하기&lt;/h3&gt; &lt;p&gt;docker run 명령어를 통해 도커를 실행할 때에는...</description>
        <pubDate>Thu, 13 Apr 2023 09:00:00 +0900</pubDate>
        <link>http://localhost:4000/day28-2/</link>
        <guid isPermaLink="true">http://localhost:4000/day28-2/</guid>
        
        <category>docker</category>
        
        <category>docker container</category>
        
        <category>docker image</category>
        
        <category>DevOps BootCamp</category>
        
        <category>Docker</category>
      </item>
    
      <item>
        <title>DevOps&amp;#91;Day28-1&amp;#93; / [Docker]</title>
        <description>&lt;h1 id=&quot;docker---attach-and-detach&quot;&gt;Docker - Attach and Detach&lt;/h1&gt; &lt;h2 id=&quot;포그라운드-실행attached-mode-run&quot;&gt;포그라운드 실행(Attached mode), run&lt;/h2&gt; &lt;p&gt;포그라운드 실행은 현재 실행하는 터미널(콘솔)에 컨테이너의 동작 상태를 출력하는 모드라고 할 수 있다.&lt;/p&gt; &lt;p&gt;이렇게 실행할 경우, 컨테이너의 동작상태를 볼 수 있어서 유용하다.&lt;/p&gt; &lt;p&gt;다만 터미널과 프로세스가 함께 부모, 자식으로 연결되므로, 터미널이 끊어질 경우 컨테이너가 종료되게 된다.&lt;/p&gt; &lt;p&gt;따라서 테스트시 이용하는 것이 바람직하다.&lt;/p&gt; &lt;p&gt;다만 일반적인 터미널 프로그램과 다르게 터미널에서 Ctrl + C 를 눌려서도 강제로 종료할 수 없고,&lt;/p&gt; &lt;p&gt;터미널을 닫으면 종료된다. 따라서 만약 포그라운드로 실행한다면, 따로 터미널을 실행해서 관리해야 한다.&lt;/p&gt; &lt;p&gt;Docker Compose 역시 기본적으로 포그라운드로 실행된다.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;docker run 명령을 사용하면 기본적으로 포그라운드로 실행된다.&lt;/p&gt; &lt;/blockquote&gt; &lt;h2 id=&quot;백그라운드-실행detached-mode-start&quot;&gt;백그라운드 실행(detached mode) start&lt;/h2&gt; &lt;p&gt;도커를 서비스형태로...</description>
        <pubDate>Thu, 13 Apr 2023 09:00:00 +0900</pubDate>
        <link>http://localhost:4000/day28-1/</link>
        <guid isPermaLink="true">http://localhost:4000/day28-1/</guid>
        
        <category>docker</category>
        
        <category>docker container</category>
        
        <category>Attached mode</category>
        
        <category>detached mode</category>
        
        <category>docker image</category>
        
        <category>DevOps BootCamp</category>
        
        <category>Docker</category>
      </item>
    
      <item>
        <title>DevOps&amp;#91;Day27-3&amp;#93; / [Docker]</title>
        <description>&lt;h1 id=&quot;dockerfile-이란&quot;&gt;Dockerfile 이란?&lt;/h1&gt; &lt;p&gt;도커파일은 docker 에서 이미지를 생성하기 위한 용도로 작성하는 파일이다.&lt;/p&gt; &lt;p&gt;만들 이미지에 대한 정보를 기술해 둔 템플릿(template) 이라고 보면 된다.&lt;/p&gt; &lt;p&gt;도커 이미지를 만들 때&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build [옵션] [작성한 dockerfile 경로] &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;위와 같이 명령어를 입력하면 작성한 도커파일의 내용을 기반으로 이미지 빌드가 시작된다.&lt;/p&gt; &lt;h1 id=&quot;도커파일-예시&quot;&gt;도커파일 예시&lt;/h1&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM ubuntu:18.04 COPY . /app RUN make /app CMD python /app/app.py &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;도커파일은 위와 같이 명령어들이 나열된 형태로 작성한다.&lt;/p&gt; &lt;p&gt;그리고 각 line 의 맨 앞은 대문자로 이루어진 지시어(Instruction) 로 시작한다.&lt;/p&gt; &lt;h2 id=&quot;도커파일-instructions-종류타입&quot;&gt;도커파일 Instructions 종류(타입)&lt;/h2&gt; &lt;h3 id=&quot;1-from&quot;&gt;1) FROM&lt;/h3&gt; &lt;p&gt;도커파일에서 FROM 은 베이스 이미지(Base image)를 지정하는 지시어다.&lt;/p&gt;...</description>
        <pubDate>Wed, 12 Apr 2023 09:00:00 +0900</pubDate>
        <link>http://localhost:4000/day27-3/</link>
        <guid isPermaLink="true">http://localhost:4000/day27-3/</guid>
        
        <category>docker</category>
        
        <category>Dockerfile</category>
        
        <category>DevOps BootCamp</category>
        
        <category>Docker</category>
      </item>
    
      <item>
        <title>DevOps&amp;#91;Day27-2&amp;#93; / [Docker]</title>
        <description>&lt;h1 id=&quot;도커-명령어&quot;&gt;도커 명령어&lt;/h1&gt; &lt;h2 id=&quot;컨테이너-제어-명령어&quot;&gt;컨테이너 제어 명령어&lt;/h2&gt; &lt;h3 id=&quot;컨테이너-내려받기&quot;&gt;컨테이너 내려받기&lt;/h3&gt; &lt;p&gt;예시로 nginx 컨테이너를 받는다면 다음과 같이 적을 수 있다. latest 태그는 가장 최신 버전의 컨테이너 이미지를 가져온다.&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# docker pull NAME[:TAG] $ docker pull nginx:latest &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h3 id=&quot;컨테이너-실행&quot;&gt;컨테이너 실행&lt;/h3&gt; &lt;p&gt;컨테이너 실행은 일반적으로 docker run 명령어를 사용하며 다음과 같은 형식을 가진다. ubuntu:16.04 컨테이너를 실행한다면 다음과 같이 실행할 수 있다.&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# docker run [OPTION] IMAGE [COMMAND] $ docker run -i -t imagename /bin/bash &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h3 id=&quot;포어그라운드fore-ground-실행&quot;&gt;포어그라운드(fore-ground) 실행&lt;/h3&gt; &lt;p&gt;t 옵션은 tty를 할당하고 i옵션은 표준 입출력을 사용한다. 예시로 ubuntu 16.04 버전의 컨테이너를 -i, -t 옵션을 주어...</description>
        <pubDate>Wed, 12 Apr 2023 09:00:00 +0900</pubDate>
        <link>http://localhost:4000/day27-2/</link>
        <guid isPermaLink="true">http://localhost:4000/day27-2/</guid>
        
        <category>docker</category>
        
        <category>docker cmd</category>
        
        <category>DevOps BootCamp</category>
        
        <category>Docker</category>
      </item>
    
      <item>
        <title>DevOps&amp;#91;Day27-1&amp;#93; / [Docker]</title>
        <description>&lt;h1 id=&quot;docker-image란&quot;&gt;Docker image란?&lt;/h1&gt; &lt;p&gt;Application을 포장 및 전송하기 위해 도커는 “docker image”를 사용한다.&lt;/p&gt; &lt;p&gt;Docker image는 파일로 어플리케이션 실행에 필요한 독립적인 환경을 포함하며, 런타임 환경을 위한 일종의 템플릿이다.&lt;/p&gt; &lt;p&gt;도커 이미지는 소스 코드, 라이브러리, 종속성, 도구 및 응용 프로그램을 실행하는데 필요한 기타 파일을 포함하는 &lt;strong&gt;불변(변경 불가)&lt;/strong&gt; 파일이다.&lt;/p&gt; &lt;p&gt;이미지는 읽기 전용이므로 스냅샷이라고도 하며, 특정 시점의 애플리케이션과 가상 환경을 나타낸다.&lt;/p&gt; &lt;p&gt;이러한 일관성은 도커의 큰 특징 중 하나로 개발자가 안정적이고 균일한 조건에서 소프트웨어를 테스트하고 실험할 수 있도록 한다.&lt;/p&gt; &lt;p&gt;이미지는 템플릿일 뿐이므로 시작하거나 실행할 수 없다. 컨테이너는 실행 중인 이미지일 뿐이기 때문이다.&lt;/p&gt; &lt;p&gt;컨테이너를 생성하면 쓰기 가능한 레이어가 immutable image(불변 이미지) 위에 추가된다. 즉, 컨테이너는 수정이 가능하다.&lt;/p&gt; &lt;p&gt;컨테이너를...</description>
        <pubDate>Wed, 12 Apr 2023 09:00:00 +0900</pubDate>
        <link>http://localhost:4000/day27-1/</link>
        <guid isPermaLink="true">http://localhost:4000/day27-1/</guid>
        
        <category>docker</category>
        
        <category>docker image</category>
        
        <category>DevOps BootCamp</category>
        
        <category>Docker</category>
      </item>
    
      <item>
        <title>DevOps&amp;#91;Day26-2&amp;#93; / [YAML과 JSON]</title>
        <description>&lt;h1 id=&quot;대표적인-데이터-교환-포맷-json&quot;&gt;대표적인 데이터 교환 포맷 JSON&lt;/h1&gt; &lt;h2 id=&quot;json의-탄생-배경&quot;&gt;JSON의 탄생 배경&lt;/h2&gt; &lt;p&gt;JSON은 JavaScript Object Notation의 줄임말로, 데이터 교환을 위해 만들어진 객체 형태의 포맷입니다. 네트워크를 통해, 어떤 객체 내용을 다른 프로그램에게 전송한다고 가정하겠습니다. 이 객체 내용을 일종의 메신저 혹은 채팅 프로그램에서 쓰는 하나의 메시지라고 한다면, 다음 객체를 어떻게 전송할 수 있을까요?&lt;/p&gt; &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;sender:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;김코딩&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;receiver:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;박해커&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;message:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;해커야 오늘 저녁 같이 먹을래?&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;createdAt:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2021-01-12 10:10:10&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;메시지 객체가 전송 가능하려면, 메시지를 보내는 발신자와 메시지를 받는 수신자가 같은 프로그램을...</description>
        <pubDate>Tue, 11 Apr 2023 09:00:00 +0900</pubDate>
        <link>http://localhost:4000/day26-2/</link>
        <guid isPermaLink="true">http://localhost:4000/day26-2/</guid>
        
        <category>yaml</category>
        
        <category>json</category>
        
        <category>DevOps BootCamp</category>
        
        <category>YAML과 JSON</category>
      </item>
    
      <item>
        <title>DevOps&amp;#91;Day26-1&amp;#93; / [YAML과 JSON]</title>
        <description>&lt;h1 id=&quot;yaml-yaml-aint-markup-language&quot;&gt;YAML: YAML Ain’t Markup Language&lt;/h1&gt; &lt;p&gt;YAML은 구조를 가진 데이터 표현 양식의 한 종류입니다. 데이터는 다양한 형태로 표현될 수 있는데 일반적으로 사용하는 JSON이나 XML도 표현 양식의 한 종류입니다. 이렇게 데이터를 형식에 맞춰 사용하는 이유는 데이터를 전달 주고 받을 때 서로 쉽게 이해하게 하기 위해서 입니다.&lt;/p&gt; &lt;p&gt;YAML은 최근 들어 많이 활용되고 있는 데이터 형식이며, 사람이 읽고 이해하기 쉬운 형태를 가지고 있습니다. DevOps 직군에서는 다양한 설정 파일들을 YAML 형식으로 작성하는 경우가 많습니다. 이때 파일 확장자는 .yml 또는 .yaml 을 사용합니다.&lt;/p&gt; &lt;h2 id=&quot;yaml-문법&quot;&gt;YAML 문법&lt;/h2&gt; &lt;h3 id=&quot;1-데이터-정의&quot;&gt;1. 데이터 정의&lt;/h3&gt; &lt;p&gt;YAML은 기본적으로 데이터를 정의 할 때, key: value 형태로 데이터를 정의합니다. 이때 콜론 : 뒤에는...</description>
        <pubDate>Tue, 11 Apr 2023 09:00:00 +0900</pubDate>
        <link>http://localhost:4000/day26-1/</link>
        <guid isPermaLink="true">http://localhost:4000/day26-1/</guid>
        
        <category>yaml</category>
        
        <category>json</category>
        
        <category>DevOps BootCamp</category>
        
        <category>YAML과 JSON</category>
      </item>
    
      <item>
        <title>DevOps&amp;#91;Day25&amp;#93; / [웹 서버 프로그램]</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/dnehgus6975/post/80c4d30e-3bf1-4f5d-a3ca-18bc4baee551/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;h2 id=&quot;apache-http-server&quot;&gt;Apache HTTP Server&lt;/h2&gt; &lt;p&gt;Apache는 Apache Software Foundation에서 만든 웹 서버 프로그램이다. 거의 모든 OS에서 실행되고, 다른 유명한 소프트웨어 프로젝트와의 문서화가 잘 되어있고 통합 지원 등의 이점이 있습니다.&lt;/p&gt; &lt;h2 id=&quot;주요-특징&quot;&gt;주요 특징&lt;/h2&gt; &lt;p&gt;동적 컨텐츠 처리&lt;/p&gt; &lt;p&gt;다양한 모듈&lt;/p&gt; &lt;p&gt;스레드 / 프로세스 기반 구조 &lt;img src=&quot;https://velog.velcdn.com/images/arnold_99/post/ecf41a0a-61bb-4ad1-8959-aabe07e8ad80/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Apache는 클라이언트 요청당 하나의 스레드가 처리하는 구조입니다.&lt;/li&gt; &lt;li&gt;사용자가 많으면 스레드 생성, 메모리 및 CPU 낭비가 심합니다.&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;mpm-multi-process-module&quot;&gt;MPM (Multi-Process Module)&lt;/h3&gt; &lt;blockquote&gt; &lt;p&gt;MPM은 크게 두 가지 방식이 있습니다. PreFork 방식 / Worker 방식&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/arnold_99/post/6df9748c-0fea-4b9f-9d13-ed6b59a22916/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;h3 id=&quot;prefork-mpm-다중-프로세스&quot;&gt;PreFork MPM (다중 프로세스)&lt;/h3&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Client 요청에 대해 Apache 자식...</description>
        <pubDate>Mon, 10 Apr 2023 09:00:00 +0900</pubDate>
        <link>http://localhost:4000/day25/</link>
        <guid isPermaLink="true">http://localhost:4000/day25/</guid>
        
        <category>네트워크</category>
        
        <category>HTTP</category>
        
        <category>Apache</category>
        
        <category>Nginx</category>
        
        <category>웹 호스팅</category>
        
        <category>POSTMAN</category>
        
        <category>DevOps BootCamp</category>
        
        <category>웹 서버 프로그램</category>
      </item>
    
      <item>
        <title>DevOps&amp;#91;Day24 발표자료&amp;#93; / [네트워크 기초]</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/dnehgus6975/post/c452944e-394b-4f9e-83f0-f7b86530aec7/image.jpg&quot; alt=&quot;발료자료-1&quot; /&gt;&lt;/p&gt; &lt;h1 id=&quot;다음의-헤더를-보고-유추할-수-있는-내용을-모두-작성하세요&quot;&gt;다음의 헤더를 보고 유추할 수 있는 내용을 모두 작성하세요.&lt;/h1&gt; &lt;h2 id=&quot;response-header&quot;&gt;Response header&lt;/h2&gt; &lt;ul&gt; &lt;li&gt; &lt;h3 id=&quot;http11-200-ok-server-nginx&quot;&gt;HTTP/1.1 200 OK Server: nginx&lt;/h3&gt; &lt;blockquote&gt; &lt;p&gt;응답은 HTTP/1.1 응답이며, 상태 코드는 200 OK 입니다. 응답을 보내는 서버는 nginx를 실행하고 있습니다.&lt;/p&gt; &lt;/blockquote&gt; &lt;/li&gt; &lt;li&gt; &lt;h3 id=&quot;date-tue-06-dec-2022-044109-gmt&quot;&gt;Date: Tue, 06 Dec 2022 04:41:09 GMT&lt;/h3&gt; &lt;blockquote&gt; &lt;p&gt;응답은 Tue, 06 Dec 2022 04:41:09 GMT 에 생성되었습니다.&lt;/p&gt; &lt;/blockquote&gt; &lt;/li&gt; &lt;li&gt; &lt;h3 id=&quot;content-type-texthtml-charsetutf-8&quot;&gt;Content-Type: text/html; charset=utf-8&lt;/h3&gt; &lt;blockquote&gt; &lt;p&gt;응답의 내용은 text/html 형식이며, utf-8로 인코딩되어 있습니다.&lt;/p&gt; &lt;/blockquote&gt; &lt;/li&gt; &lt;li&gt; &lt;h3 id=&quot;transfer-encoding-chunked&quot;&gt;Transfer-Encoding: chunked&lt;/h3&gt; &lt;blockquote&gt; &lt;p&gt;chunked 전송 인코딩을 사용하여 보내집니다.&lt;/p&gt; &lt;/blockquote&gt; &lt;/li&gt; &lt;li&gt; &lt;h3 id=&quot;connection-keep-alive&quot;&gt;Connection: keep-alive&lt;/h3&gt; &lt;blockquote&gt; &lt;p&gt;연결은 keep-alive되어 있습니다.&lt;/p&gt; &lt;/blockquote&gt; &lt;/li&gt;...</description>
        <pubDate>Fri, 07 Apr 2023 09:00:00 +0900</pubDate>
        <link>http://localhost:4000/day24-3/</link>
        <guid isPermaLink="true">http://localhost:4000/day24-3/</guid>
        
        <category>네트워크</category>
        
        <category>HTTPS</category>
        
        <category>HTTP</category>
        
        <category>Header</category>
        
        <category>POSTMAN</category>
        
        <category>발표자료</category>
        
        <category>DevOps BootCamp</category>
        
        <category>네트워크 기초</category>
      </item>
    
      <item>
        <title>DevOps&amp;#91;Day24-2&amp;#93; / [네트워크 기초]</title>
        <description>&lt;h2 id=&quot;chapter-아키텍처를-구성하는-요소들--load-balancer&quot;&gt;[Chapter] 아키텍처를 구성하는 요소들 : Load Balancer&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;단일 서버로 구성할 경우 해당 서버에 장애가 발생했을 때 정상적인 서비스 제공 불가능&lt;/li&gt; &lt;li&gt;가용성을 높이기 위하여 두 대 이상의 서버로 구성하는 경우가 있는데 IP가 다르기 때문에 사용자가 서비스를 호출할 때 어떤 IP로 서비스를 요청할 지 결정해야 함&lt;/li&gt; &lt;li&gt;로드밸런서에는 동일한 서비스를 제공하는 다수의 서버가 등록되고 사용자로부터 서비스 요청이 오면 로드밸런서가 받아 사용자별로 다수의 서버에 요청을 분산시켜 부하를 분산&lt;/li&gt; &lt;li&gt;사용자는 개별 IP를 통해 각 서버로 접근&lt;/li&gt; &lt;li&gt;로드밸런서는 서비스가 가능한 서버로만 사용자 요청을 분산하므로 서버에서 장애가 발생하더라도 다른 서버에서 서비스 제공 가능&lt;/li&gt; &lt;/ul&gt; &lt;h1 id=&quot;계층별-load-balancer&quot;&gt;계층별 Load Balancer&lt;/h1&gt; &lt;h2 id=&quot;l4-load-balancer&quot;&gt;L4 Load Balancer&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;OSI 4계층&lt;/li&gt;...</description>
        <pubDate>Fri, 07 Apr 2023 09:00:00 +0900</pubDate>
        <link>http://localhost:4000/day24-2/</link>
        <guid isPermaLink="true">http://localhost:4000/day24-2/</guid>
        
        <category>네트워크</category>
        
        <category>Proxy</category>
        
        <category>Load Balancer</category>
        
        <category>HTTPS</category>
        
        <category>HTTP</category>
        
        <category>아키텍쳐</category>
        
        <category>POSTMAN</category>
        
        <category>DevOps BootCamp</category>
        
        <category>네트워크 기초</category>
      </item>
    
  </channel>
</rss>
